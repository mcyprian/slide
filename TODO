1. ZOZNÁMENIE SA SO STAVOM PROJEKTU
    - porozumenie jednotlivým častiam a logickým súvislostiam popisu dátových
      štruktúr pomocou predikátov
    - štúdium rôznych typov rekurzívnych predikátov
    - zoznámenie sa s aktuálnym stavom projektu, štruktúre kódu
    - podrobnejšia analýza modulov entailment, input

2. ANALÝZA NESPRACOVATEĽNÝCH PREDIKÁTOV
    - zameranie sa na predikáty z adresára slrd_entl
    - tvorba skriptu find_problematic.sh
    - vyhodnotenie pomeru úspešne a neúspešne spracovaných predikátov
    - spracovanie percentuálneho výskytu vínimiek pri neúspechu
    - výber najfrekventovanejších vínimiek

3. NÁVRH A IMPLEMENTÁCIA OBJEKTOV NA REPREZENTÁCIU PRAVIDIEL, PREDIKÁTOV,
TOP CALLOV
    - analýza dátových štruktúr (kombinácie tuple a list)
    - implementácia objektov Rule, TopCall, Predicate
    - getters na získanie povodnej reprezentácie dátovými štruktúrami
    - integrácia objektov do modulu input
    - pridanie atribútu not equal

4. IMPLEMENTÁCIA ROZBALOVANIA A MAPOVANIA
    - modul mapping.py
    - pokus o vyriešenie resp. zjednodušenie predikátov pred zavolaním nástroja
      libvata
    - postupné rozbalovanie predikátov v rámci lavej a pravej strany
    - snaha namapovať na seba pravidlá a volania
    - spätne kompatibilný Python3 kód


OTÁZKY:
    - spravna logika pri mapovani?? 
      1. je v top_level a je zhodne 
      2. nil, nil
      3. nie je v top_level, ani allocovane ani nil -> mapujeme
    - mapovat aj pri vybere argumentov?
    - ako si poradit s not equals? staci ak sedi lava prava strana? moze sa bit
      s equal?
    - rozbalovat na striedacku? radsej pouzit iny princip (rozbalovat stranu z
      mensim poctom pravidiel, preferovat jednu stranu??)
    - pri neuspesnom mapovani predat automatu zvysne pravidla??



TODO:
    - Vylepsit logiku pri vybere predikatu na rozbalovanie                                         DONE
    - Vylepsit tvorbu unikatnych identifikatorov                                                   DONE
    - points_to na LHS, ak sa nachadza v RHS predikat s namapovanou premennou v argumente          DONE
      rozbalujeme tuto, ak nie napriklad zlava
    - RHS: rozlisit star a or, v pripade or sa pri uspesnom namapovani mozu odstranit obe casti    DONE
    - Zohladnit identical set pri sophisticated expansion                                          DONE


- Pri rozbalovani predikatu, kde je vysledokom rozbalenia disjunkcia je potrebne
  cokolvek co bolo pred rozbalenim v konjunkcii s predikatom "rozdvojit" - pridat
  do oboch casti vyslednej disjunkcie                                                              DONE

- Disjunkcia na LHS:                                                                               DONE
    a or b -> c or d
    zatial pridat vinimku

- Pri mapovani points_to pridat impicitne not_equals (rovno trojica identifikatorov ?)              DONE
- Na zaver pripadne namatchovat predikat po rozbaleni na equals, not_equals (dll-vc01...)
  pre vsetky not_equals na RHS musi byt podpora na LHS, to iste equals


    - LHS nil na pravo je nie je z top levelu mozme namapovat, nesmie sa neskor objavit ako alloc

    - V pripade ze po rozbalovani ostane 1 predikat na kazdej strane zavolat libvata

    - not equal nesmie sa objavit x != y a y = z a z = x

- Vytvorit mnozinu vsetkych alokovanych uzlov                                                      DONE
- z ekvivalencii global local, local local, odvodit identical set                                  DONE
- global global pokryt lavou stranou
- nezahadzovat not equal po namatchovani pravidiel                                                 DONE
- redizajnovat identical??

- Disjunction on LHS vyriesit rekurzivnym volanim map_nodes
- pridat message do InputError
